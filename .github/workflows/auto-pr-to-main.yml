name: Auto PR to Main

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  check-staging:
    name: Check Staging Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Wait for other workflows
        run: |
          echo "‚è≥ Waiting 10 seconds for other workflows to complete..."
          sleep 10
          echo "‚úÖ Ready to proceed"

  create-pr:
    name: Create PR to Main
    needs: check-staging
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          
      - name: Install jq for JSON processing
        run: |
          echo "üì¶ Installing jq..."
          sudo apt-get update -qq
          sudo apt-get install -y jq

      - name: Debug workflow info
        run: |
          echo "üîç Workflow Debug Info:"
          echo "- Event name: ${{ github.event_name }}"
          echo "- Ref: ${{ github.ref }}"
          echo "- Ref name: ${{ github.ref_name }}"
          echo "- SHA: ${{ github.sha }}"
          echo "- Actor: ${{ github.actor }}"
          echo "- Current branch: $(git branch --show-current)"
          echo "- Remote branches:"
          git branch -r

      - name: Check if PR already exists
        id: check_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Checking for existing PR from develop to main..."
          PR_EXISTS=$(gh pr list --base main --head develop --json number --jq length)
          echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT
          echo "‚úÖ PR exists: $PR_EXISTS"
          
          if [ "$PR_EXISTS" != "0" ]; then
            echo "‚ö†Ô∏è PR already exists, skipping creation"
            gh pr list --base main --head develop
          fi

      - name: Get version info
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-${{ github.run_number }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create_pr
        if: steps.check_pr.outputs.pr_exists == '0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìù Creating PR from develop to main..."
          
          # Get latest commits
          COMMITS=$(git log origin/main..origin/develop --pretty=format:"- %s (%h)" --no-merges | head -10 || echo "No commits found")
          echo "Commits:"
          echo "$COMMITS"
          
          # Build PR body
          PR_TITLE="üéâ Release v${{ steps.version.outputs.version }}"
          
          # Use cat to create multi-line body (safer than quotes)
          read -r -d '' PR_BODY <<'PRBODY' || true
## üöÄ Production Release - v${{ steps.version.outputs.version }}

This PR was automatically created after successful staging deployment.

### ‚úÖ All Checks Passed
- ‚úÖ Lint
- ‚úÖ Unit Tests
- ‚úÖ E2E Tests
- ‚úÖ Build
- ‚úÖ Staging Deployment

### üìã Changes

CHANGESGOHERE

### üéØ Deployment
- **Environment**: Production
- **Version**: v${{ steps.version.outputs.version }}
- **Latest commit**: ${{ github.sha }}
- **Author**: @${{ github.actor }}

### ‚ö†Ô∏è Important
- This will trigger a production deployment
- Review changes carefully before merging
- Ensure all staging tests have passed

---
*This PR was automatically generated after successful develop deployment.*
PRBODY

          # Replace placeholder with commits
          PR_BODY="${PR_BODY//CHANGESGOHERE/$COMMITS}"
          
          # Create PR using GitHub API
          echo "üöÄ Creating PR..."
          RESPONSE=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "$(jq -n \
              --arg title "$PR_TITLE" \
              --arg body "$PR_BODY" \
              --arg head "develop" \
              --arg base "main" \
              '{title: $title, body: $body, head: $head, base: $base}')")
          
          # Check result
          if echo "$RESPONSE" | jq -e '.number' > /dev/null 2>&1; then
            PR_NUMBER=$(echo "$RESPONSE" | jq -r '.number')
            PR_URL=$(echo "$RESPONSE" | jq -r '.html_url')
            echo "‚úÖ PR #$PR_NUMBER created successfully!"
            echo "üîó URL: $PR_URL"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          else
            ERROR_MSG=$(echo "$RESPONSE" | jq -r '.message // "Unknown error"')
            echo "‚ùå Failed to create PR: $ERROR_MSG"
            echo "Full response: $RESPONSE"
            exit 1
          fi
          
      - name: PR Created Summary
        if: steps.check_pr.outputs.pr_exists == '0' && steps.create_pr.outputs.pr_number
        run: |
          echo "üìã PR Creation Summary:"
          echo "- PR Number: #${{ steps.create_pr.outputs.pr_number }}"
          echo "- PR URL: ${{ steps.create_pr.outputs.pr_url }}"
          echo "- Base: main"
          echo "- Head: develop"
          echo "- Version: v${{ steps.version.outputs.version }}"
          echo ""
          echo "‚úÖ Workflow completed successfully!"
