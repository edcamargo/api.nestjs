name: Auto PR to Main

on:
  push:
    branches:
      - develop
  workflow_dispatch: # Permite execu√ß√£o manual para teste

jobs:
  check-staging:
    name: Wait for Staging Deployment
    runs-on: ubuntu-latest
    outputs:
      should_create_pr: ${{ steps.check.outputs.should_create }}
    
    steps:
      - name: Wait for other workflows to complete
        run: sleep 10
      
      - name: Check if should create PR
        id: check
        run: echo "should_create=true" >> $GITHUB_OUTPUT

  create-pr:
    name: Create PR to Main
    runs-on: ubuntu-latest
    needs: check-staging
    if: needs.check-staging.outputs.should_create_pr == 'true'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          
      - name: Install jq for JSON processing
        run: |
          echo "üì¶ Installing jq..."
          sudo apt-get update -qq
          sudo apt-get install -y jq

      - name: Debug workflow info
        run: |
          echo "üîç Workflow Debug Info:"
          echo "- Event name: ${{ github.event_name }}"
          echo "- Ref: ${{ github.ref }}"
          echo "- Ref name: ${{ github.ref_name }}"
          echo "- SHA: ${{ github.sha }}"
          echo "- Actor: ${{ github.actor }}"
          echo "- Current branch: $(git branch --show-current)"
          echo "- Remote branches:"
          git branch -r

      - name: Check if PR already exists
        id: check_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Checking for existing PR from develop to main..."
          PR_EXISTS=$(gh pr list --base main --head develop --json number --jq length)
          echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT
          echo "‚úÖ PR exists: $PR_EXISTS"
          
          if [ "$PR_EXISTS" -gt 0 ]; then
            echo "‚ö†Ô∏è PR already exists, skipping creation"
            gh pr list --base main --head develop
          fi

      - name: Get version info
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-${{ github.run_number }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create_pr
        if: steps.check_pr.outputs.pr_exists == '0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìù Creating PR from develop to main..."
          
          # Get latest commits from develop
          echo "üìã Getting commit history..."
          COMMITS=$(git log origin/main..origin/develop --pretty=format:"- %s (%h)" --no-merges | head -10 || echo "No commits found")
          
          echo "Commits to include:"
          echo "$COMMITS"
          
          # Create PR body using echo (more reliable)
          cat > pr_body.md << 'EOFMARKER'
## üöÄ Production Release - vVERSION_PLACEHOLDER

This PR was automatically created after successful staging deployment.

### ‚úÖ All Checks Passed
- ‚úÖ Lint
- ‚úÖ Unit Tests
- ‚úÖ E2E Tests
- ‚úÖ Build
- ‚úÖ Staging Deployment

### üìã Changes

```
COMMITS_PLACEHOLDER
```

### üéØ Deployment
- **Environment**: Production
- **Version**: vVERSION_PLACEHOLDER
- **Latest commit**: SHA_PLACEHOLDER
- **Author**: @AUTHOR_PLACEHOLDER

### ‚ö†Ô∏è Important
- This will trigger a production deployment
- Review changes carefully before merging
- Ensure all staging tests have passed

---
*This PR was automatically generated after successful develop deployment.*
EOFMARKER

          # Replace placeholders with actual values
          sed -i.bak "s/VERSION_PLACEHOLDER/${{ steps.version.outputs.version }}/g" pr_body.md
          sed -i.bak "s/SHA_PLACEHOLDER/${{ github.sha }}/g" pr_body.md
          sed -i.bak "s/AUTHOR_PLACEHOLDER/${{ github.actor }}/g" pr_body.md
          
          # Replace commits (escape special chars)
          COMMITS_ESCAPED=$(echo "$COMMITS" | sed 's/[\/&]/\\&/g')
          echo "$COMMITS_ESCAPED" > commits.tmp
          sed -i.bak "/COMMITS_PLACEHOLDER/r commits.tmp" pr_body.md
          sed -i.bak "/COMMITS_PLACEHOLDER/d" pr_body.md
          
          echo "ÔøΩ PR body created"

          # Use GitHub API directly instead of gh CLI
          RESPONSE=$(curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d @- << EOF
{
  "title": "üéâ Release v${{ steps.version.outputs.version }}",
  "body": $(cat pr_body.md | jq -Rs .),
  "head": "develop",
  "base": "main"
}
EOF
)
          
          echo "API Response:"
          echo "$RESPONSE"
          
          # Check if PR was created successfully
          if echo "$RESPONSE" | jq -e '.number' > /dev/null 2>&1; then
            PR_NUMBER=$(echo "$RESPONSE" | jq -r '.number')
            echo "‚úÖ PR #$PR_NUMBER created successfully!"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            ERROR_MSG=$(echo "$RESPONSE" | jq -r '.message // "Unknown error"')
            echo "‚ùå Failed to create PR: $ERROR_MSG"
            echo "Full response: $RESPONSE"
            exit 1
          fi

      - name: Add labels to PR
        if: steps.check_pr.outputs.pr_exists == '0'
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get PR number from previous step or find it
          if [ -z "${{ steps.create_pr.outputs.pr_number }}" ]; then
            PR_NUMBER=$(gh pr list --base main --head develop --json number --jq '.[0].number')
          else
            PR_NUMBER="${{ steps.create_pr.outputs.pr_number }}"
          fi
          
          if [ -n "$PR_NUMBER" ]; then
            echo "Adding label to PR #$PR_NUMBER..."
            # Only add 'release' label (it should exist by default)
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels \
              -d '{"labels":["release"]}' || echo "‚ö†Ô∏è Could not add labels (non-critical)"
            echo "‚úÖ Labels step completed"
          fi

      - name: Comment on PR
        if: steps.check_pr.outputs.pr_exists == '0'
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -z "${{ steps.create_pr.outputs.pr_number }}" ]; then
            PR_NUMBER=$(gh pr list --base main --head develop --json number --jq '.[0].number')
          else
            PR_NUMBER="${{ steps.create_pr.outputs.pr_number }}"
          fi
          
          if [ -n "$PR_NUMBER" ]; then
            echo "Adding comment to PR #$PR_NUMBER..."
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
              -d '{"body":"‚úÖ All staging checks passed! Ready for production deployment.\n\n**Please review carefully before merging to production.**"}' || echo "‚ö†Ô∏è Could not add comment (non-critical)"
            echo "‚úÖ Comment step completed"
          fi
