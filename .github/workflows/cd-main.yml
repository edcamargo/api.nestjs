name: CD - Production

on:
  push:
    branches:
      - main

jobs:
  deploy-production:
    name: Deploy to Production

on:
  push:
    branches: [main]  # Deploy apenas quando PR de developâ†’main for aprovado e mergeado

env:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.edcamargo.dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: npx prisma migrate deploy

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version
        id: version
        run: echo "version=$(date +'%Y.%m.%d')-${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nestjs-api:latest
            ${{ secrets.DOCKER_USERNAME }}/nestjs-api:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/nestjs-api:v${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nestjs-api:latest
          cache-to: type=inline

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## ðŸš€ Production Release v${{ steps.version.outputs.version }}
            
            ### Commit
            - SHA: ${{ github.sha }}
            - Author: ${{ github.actor }}
            - Message: ${{ github.event.head_commit.message }}
            
            ### Docker Images
            - `${{ secrets.DOCKER_USERNAME }}/nestjs-api:latest`
            - `${{ secrets.DOCKER_USERNAME }}/nestjs-api:v${{ steps.version.outputs.version }}`
            - `${{ secrets.DOCKER_USERNAME }}/nestjs-api:${{ github.sha }}`
            
            ### Deployment
            - Environment: Production
            - Date: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

      - name: Deploy summary
        run: |
          echo "### ðŸŽ‰ Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: main" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: ${{ secrets.DOCKER_USERNAME }}/nestjs-api:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Release created successfully!" >> $GITHUB_STEP_SUMMARY

      # Uncomment if you want Slack notifications
      # - name: Notify deployment
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: |
      #       Production deployment ${{ job.status }}
      #       Version: v${{ steps.version.outputs.version }}
      #       Commit: ${{ github.sha }}
      #       Author: ${{ github.actor }}
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
