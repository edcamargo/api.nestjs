name: CI Pipeline

on:
  pull_request:
    branches: [develop, main]
  push:
    branches:
      - develop
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        env:
          DATABASE_URL: 'file:./dev.db'
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        env:
          DATABASE_URL: 'file:./dev.db'
        run: npm ci --legacy-peer-deps

      - name: Generate Prisma Client
        env:
          DATABASE_URL: 'file:./dev.db'
        run: npx prisma generate

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unit
          name: unit-tests
        continue-on-error: true

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        env:
          DATABASE_URL: 'file:./test.db'
        run: npm ci --legacy-peer-deps

      - name: Generate Prisma Client
        env:
          DATABASE_URL: 'file:./test.db'
        run: npx prisma generate

      - name: Run database migrations
        env:
          DATABASE_URL: 'file:./test.db'
        run: npx prisma migrate deploy

      - name: Seed database
        env:
          DATABASE_URL: 'file:./test.db'
        run: npx prisma db seed

      - name: Run E2E tests
        env:
          DATABASE_URL: 'file:./test.db'
          JWT_SECRET: test-secret-key-for-ci-cd-pipeline
          NODE_ENV: test
          PORT: 3000
          OTEL_ENABLED: false
        run: npm run test:e2e

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: e2e
          name: e2e-tests
        continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        env:
          DATABASE_URL: 'file:./dev.db'
        run: npm ci --legacy-peer-deps

      - name: Generate Prisma Client
        env:
          DATABASE_URL: 'file:./dev.db'
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, build]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          if [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.e2e-tests.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Quality gate failed!"
            echo "Unit Tests: ${{ needs.unit-tests.result }}"
            echo "E2E Tests: ${{ needs.e2e-tests.result }}"
            echo "Build: ${{ needs.build.result }}"
            exit 1
          fi
          echo "✅ Quality gate passed!"
          echo "All checks completed successfully."
